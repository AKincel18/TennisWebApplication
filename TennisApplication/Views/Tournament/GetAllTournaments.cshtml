@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using TennisApplication.Dtos.User
@using Microsoft.AspNetCore.Http
@using TennisApplication.Others
@inject IHttpContextAccessor HttpContextAccessor
@model IEnumerable<TennisApplication.Dtos.Tournament.TournamentReadDto>

@{
    ViewData["Title"] = "Tournaments";
    DeserializeUser deserializable = new DeserializeUser(new HttpContextAccessor());
    UserReadDto loggedUser = deserializable.GetLoggedUser();

}
@{
    bool isUserWithTournamentDirectorRole = 
      loggedUser != null && loggedUser.Role.Equals(Role.TournamentDirector);
    bool isUserWithPlayerRole = 
        loggedUser != null && loggedUser.Role.Equals(Role.Player);
    
}
<!DOCTYPE html>
 <head>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.19.1/moment.js"></script>
     <script src="https://drvic10k.github.io/bootstrap-sortable/Scripts/bootstrap-sortable.js"></script>
 </head>
 <html>
<h2 class="my-text-color">Tournaments</h2>

@if (isUserWithTournamentDirectorRole)
{
    <p>
        <a href='@Url.Action("CreateTournamentView", "Tournament")'>
            <button class="my-button" style="border-radius: 10px">Create a new tournament</button>
        </a>
     </p>
    

    
}
 @if (TempData.ContainsKey("deleted"))
 {
     var name = TempData["deleted"].ToString();
     <partial name="TournamentDeletedModal" model="@name"/>
 }
 @if (TempData.ContainsKey("CantDelete"))
 {
     var name = TempData["CantDelete"].ToString();
     <partial name="CannotDeleteTournamentModal" model="@name"/>
 }
 <body>
     <table class="table sortable">
         
             
         
         <thead>
         <tr>
             <th>
                 @Html.DisplayNameFor(model => model.Name)
             </th>
             <th>
                 @Html.DisplayNameFor(model => model.Place)
             </th>
             <th>
                 @Html.DisplayNameFor(model => model.Date)
             </th>
             <th>
                 @Html.DisplayNameFor(model => model.DrawSize)
             </th>
             <th>
                 @Html.DisplayNameFor(model => model.Completed)
             </th>
             <th>

             </th>

         </tr>
         </thead>

         <tbody>
         @foreach (var item in Model)
         {
             // 0 -> completed, 1 -> during, 2 -> not started
             int tournamentPhase = item.Completed ? 0 : item.Started ? 1 : 2;
             <tr>
                 <td>
                     @Html.DisplayFor(modelItem => item.Name)
                 </td>
                 <td>
                     @Html.DisplayFor(modelItem => item.Place)
                 </td>
                 <td>
                     @Html.DisplayFor(modelItem => item.Date)
                 </td>
                 <td>
                     @Html.DisplayFor(modelItem => item.DrawSize)
                 </td>
                 <td>
                     @{
                         switch (tournamentPhase)
                         {
                             case 0:
                                 <div class="yes_color">
                                     Yes
                                 </div>
                                 break;
                             case 1:
                                 <div class="during-color">
                                     During
                                 </div>
                                 break;
                             case 2:
                                 <div class="no-color">
                                     No
                                 </div>
                                 break;
                         }
                     }
                     


                 </td>
                 <td>
                     @switch (tournamentPhase)
                     {
                         case 0:
                             <a asp-controller="CourseTournament" 
                                asp-action="CompletedTournamentDetail" asp-route-id="@item.Id">Results</a>
                             break;
                         case 1:
                             <a asp-controller="CourseTournament" asp-action="CompletedTournamentDetail" 
                                asp-route-id="@item.Id">Live</a>
                             break;
                         case 2:
                             <a asp-controller="Tournament" asp-action="GetIncomingTournament">
                                 Enrolments
                             </a>
                             break;
                     }
                     @if (isUserWithTournamentDirectorRole)
                     {
                         <a asp-controller="Tournament" asp-action="UpdateTournamentView" asp-route-id="@item.Id">Edit</a>
                         <a asp-controller="Tournament" asp-action="DeleteTournament" asp-route-id="@item.Id">Delete</a>
                     }

                 </td>
             </tr>
         }
         </tbody>
     </table>
    
 </body>
 
</html>